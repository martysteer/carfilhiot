<HTML>
<HEAD>
<TITLE>
game2 - Ice Bridge - The Game Concept - Mechanisms
</TITLE>
</HEAD>
<BODY bgcolor="#e0e0ff">
<TABLE BORDER=0>
<TR>
<TD>
<IMG SRC="icebrlog.jpg" ALT="ice bridge logo">
</TD>
<TD>
<b>&copy; Gil Williamson 1999 and 2005<P></b>
Last Update 9 Feb 2005
</TD>
<TD>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</TD>
</TR>
</TABLE>
<hr>
game2
<P>
<TABLE BORDER=1>
<TR>
<TD><A HREF="./game1.htm">Previous</A></TD>
<TD><A HREF="./game3.htm">Next</A></TD>
<TD><A HREF="./index.htm#index">Index</A></TD>
</TR>
</TABLE>
<H2>
Ice Bridge - The Game Concept - Mechanisms
</H2>
The principal mechanisms we would use to deliver the game would be 
<B>web pages</B>, <B>email</B> and (to a limited extent)
<B>Search Engines</B>.  The game might spawn a newsgroup if it
were successful, in which case the DMs might inject some 
messages into that, but not as part of a running game.
<P>
A certain amount of data would have to be held against each
group. I am against cookies, but am for centrally-held passwords and
progress data.
<P>
A player would apply to participate in a game, and would be 
allocated companions with whom the player would only
correspond by email or "chat room".
<P>
I think that there should be a minimum of server-side cgi.  For a
start, many potential DMs will have no ability to set up
server-side cgi, and we should restrict ourselves to a few
centrally held functions that all users can use and all DMs
can exploit, like <I>sendmail</I>, Although
Javascript and even Java are "crackable", it will spoil the users'
fun if they actually do cheat, and we can place traps that ensure
we spot cheating when it happens.
<H3>
Web Pages
</H3>
Among the deliverables on web pages might be:
<UL>
<LI>Simple text and pictures;
<LI>Image map pictures, on which point-and-click would lead
to other pages or to Javascript pop-ups;
<LI>Animated gifs;
<LI>Perhaps Shockwave images <a href="andym.html" target=_blank>like this</A>;
<LI>MIDI sounds;
<LI>Coded messages in text or pictures;
<LI>Puzzles - Javascript-driven or otherwise - there
are at least 30 categories of puzzle one could deliver;
<LI>Calculations to do;
<LI>Things to remember;
<LI>Forms to fill;
<LI>Forms which generate email;
<LI>Microdot pictures, downloads and links;
<LI>Bogus web cams, both static and controllable;
<LI>Bogus Newsfeeds;
<LI>Chat rooms;
<LI>Java applets
</UL> 
While this does not	include the scenes of wholesale massacre by 
automatic weapons normally associated with computer games, 
many fine games, from Colossal Cave to Myst and beyond have been
delivered with technology no better than html and client-side Java
and Javascript. Actually, I suspect little programming will be
necessary.
<P>
I'd be against early extensive use of big-volume media such as large
Java applets, mpeg, wav, large images, etc. just because of 
download time. However, user
tolerance to download rises in proportion to the anticipated
fun.
<P>
<H3>
Email
</H3>
<P>
In order to render the game more personal, email to and from the 
participants might be used, strictly on the basis of <b>necessary</b>
information. Examples of its use might be:
<UL>
<LI>Informing a user about events that are happening to that
user's group;
<LI>Giving a user a password or code key to enable their
group to progress;
<LI>Email generated by a user in filling a form to let the
system know what the user's group wants to do, or to make
some assertion, or ask a question.
</UL>
<H3>
Search Engines
</H3>
First, it would be possible to build a search engine dedicated to
the game system.  As ever, a search engine is only any good if 
you know what question to ask.
<P>
However, Google and Yahoo don't seem to mind storing odd references
to web pages.  About two days after the URL is given to them,
it is visible for searches. So, if the keywords we gave it
were extremely uncommon, or simply invented, and the page content 
were only a set of links, we could plant clues for players in
any responsive search engine.
<TABLE BORDER=1>
<TR>
<TD><A HREF="./game1.htm">Previous</A></TD>
<TD><A HREF="./game3.htm">Next</A></TD>
<TD><A HREF="./index.htm#index">Index</A></TD>
</TR>
</TABLE>
</BODY>
</HTML>